-- Generated by build-tables.py

{-# LANGUAGE CPP, ForeignFunctionInterface, MagicHash, UnboxedTuples #-}

module Data.Bits.Extras.Foreign
  ( byteIdx
  , debruijn_lsb64
  , debruijn_lsb32
  , debruijn_rank32
  , debruijn_log32
  ) where

import Foreign.Ptr
import Foreign.Storable
import GHC.Base
import Data.Word

{- | A 64 bit deBruijn multiplication table for calculating the the value of a single bit in a word64 -}
foreign import ccall "static &debruijn_lsb64" debruijn_lsb64 :: Ptr Word8
{- | A 32 bit deBruijn multiplication table for (n * 0x077CB531U) >> 27 -}
foreign import ccall "static &debruijn_lsb32" debruijn_lsb32 :: Ptr Word8
{- | Frigo's algorithm from http://stackoverflow.com/questions/7365562/de-bruijn-like-sequence-for-2n-1-how-is-it-constructed -}
foreign import ccall "static &debruijn_rank32" debruijn_rank32 :: Ptr Word8
{- | A 32 bit deBruijn multiplication table for calculating log_2 based on first rounding down to 1 less than a power of 2 -}
foreign import ccall "static &debruijn_log32" debruijn_log32 :: Ptr Word8

#ifndef HLINT
inlinePerformIO :: IO a -> a
inlinePerformIO (IO m) = case m realWorld# of
  (# _, r #) -> r
{-# INLINE inlinePerformIO #-}
#endif

byteIdx :: Ptr Word8 -> Int -> Word8
byteIdx bs i = inlinePerformIO $ peekElemOff bs i
{-# INLINE byteIdx #-}
